@inject IToast ToastService

<div class="toast @(IsVisible ? "toast-visible" : "") @windowShow @BackgroundCssClass" @onclick="HideToast">
    <div class="toast-icon">
        <i class="fa fa-@IconCssClass" aria-hidden="true"></i>
    </div>
    <div class="toast-body">
        <h5>@Heading</h5>
        <p>@Message</p>
        @if (isWarning)
        {
            <div>
                <button class="btn btn-success" @onclick="(()=>isConfirm = true)">Да</button>
                <button class="btn btn-danger">Нет</button>
            </div>
        }

    </div>
</div>


@code {
    [Parameter]
    public RenderFragment Message { get; set; }

    [Parameter]
    public EventCallback OnClickConfirm { get; set; }

    private bool IsVisible;
    private string BackgroundCssClass;
    private string IconCssClass;
    private string Heading;
    private string windowShow = "";
    private bool isWarning;

    private bool isConfirm = false;

    protected override void OnInitialized()
    {
        HideToast();
    }

    public void ShowToast(ToastLevel level)
    {
        var toast = ToastService.ShowToast(level);
        BackgroundCssClass = toast.Item1;
        IconCssClass = toast.Item2;
        Heading = toast.Item3;
        isWarning = Heading == ToastLevel.Warning.ToString() ? true : false;
        IsVisible = true;
        windowShow = "show";
    }

    private void HideToast()
    {
        IsVisible = default;
        BackgroundCssClass = "";
        IconCssClass = "";
        windowShow = "hide";
        if (isConfirm)
        {
            OnClickConfirm.InvokeAsync(isConfirm);
        }
    }

}
