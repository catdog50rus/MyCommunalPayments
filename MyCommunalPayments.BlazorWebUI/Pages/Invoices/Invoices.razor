@page "/Invoices/invoices"
@inject NavigationManager navi

<!-- Форма -->
@if (!isPay)
{
    <div class="container-fluid">
    <div class="row">
        <div class="col">
            <h2 class="text-center">Квитанции ЖКХ </h2>
            <div class="row mb-3">
                @*Добавление нового счета*@
                <div class="col">
                    <button class="btn btn-success " @onclick="()=>OpenModal()">Добавить</button>
                </div>
                @*Флаг отображения оплаченных/неоплаченных квитанций*@
                <div class="col text-right align-content-center">
                    <label>Показывать только неоплаченные квитанции</label>
                    <input type="checkbox" checked="checked" value="isNotPaided" @onchange="()=>ShowPaided()" />
                </div>
            </div>
            @*  Отображение таблицы со счетами  *@
            <table class="table table-sm table-bordered table-hover ">
                @*Заголовок таблицы*@
                <thead class="table-dark ">
                    <tr>
                        <th scope="col">Оплачено</th>
                        <th scope="col" class="w-auto">Период</th>
                        <th scope="col" class="w-auto">Поставщик услуг</th>
                        <th scope="col" class="w-auto">Сумма</th>
                        <th scope="col" class="w-auto"></th>
                        <th scope="col" class="w-auto"></th>
                    </tr>
                </thead>
                @*Тело таблицы*@
                @foreach (var item in invoices)
                {
                    <tbody>
                        <tr>
                            <!--Чек-бокс-->
                            <td>
                                <div class="text-center align-content-center">
                                    @if (item.Pay)//Проверяем, был ли флажек в БД
                                    {
                                        //Если был ставим атрибут checked
                                        <input onclick="return false;" type="checkbox" checked="checked" />
                                    }
                                    else
                                    {
                                        <input onclick="return false;" type="checkbox" />
                                    }
                                </div>
                            </td>
                            <!--Период-->
                            <td>
                                <div>
                                    @item.Period
                                </div>
                            </td>
                            <!--Поставщик-->
                            <td>
                                <div>
                                    @item.Provider.NameProvider
                                </div>
                            </td>
                            <!--Сумма-->
                            <td>
                                <div class="text-right">
                                    @item.InvoiceSum
                                </div>

                            </td>
                            <!--Блок кнопок-->
                            <td>
                                <div class="text-center">
                                    <button class="btn btn-sm btn-info" @onclick="(() => Edit(item))">Изменить</button>
                                    <button class="btn btn-sm btn-danger" @onclick="(() => Remove(item))">Удалить</button>
                                    <button class="btn btn-sm btn-warning" @onclick="(()=>SetService(item))">Услуги</button>
                                </div>
                            </td>
                            @*Блок оплаты*@
                            <td>
                                <div class="text-center">
                                    @if (item.Pay)
                                    {
                                        <button class="btn btn-sm btn-success" @onclick="()=>Pay(item)">Оплачено!</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-outline-success" @onclick="()=>Pay(item)">Оплатить</button>
                                    }
                                </div>
                            </td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
    </div>
</div>
}
else
{
    <Payments
            Invoice="invoice"
              OnPaimentReturnToInvoices="ReturnToPayment"
              />
}


<!-- Modal -->
<Modal @ref="modal">
    <Title>
        <p>Добавление нового счета за ЖКХ</p>
    </Title>
    <CloseButton>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
            <span aria-hidden="true">&times;</span>
        </button>
    </CloseButton>
    <Body>
        <!--Период-->
        <div class="col mb-3">
            <select class="form-control" placeholder="Период" @bind="periodName">
                @foreach (var item in periodsList)
                {
                    <option>@item.ToString()</option>
                }
            </select>
        </div>
        <!--Поставщик-->
        <div class="col mb-3">
            <select class="form-control" placeholder="Поставщик" @bind="providerName">
                @foreach (var item in providersList)
                {
                    <option>@item.NameProvider</option>
                }
            </select>
        </div>
        <!--Сумма-->
        <div class="col mb-3">
            <input class="form-control" placeholder="Сумма" @bind="summ" />
        </div>
        @*Флаг оплаты. Можно только снять оплату*@
        @if (pay)
        {
            <div>
                <input @onchange="()=>RePaid()" type="checkbox" checked="checked" value="@pay" />
            </div>
        }
    </Body>
    <Footer>
        <a class="btn btn-sm btn-outline-success" role="button" href="@GetProviderByName(providerName).WebSite" target="_blank">Перейти в личный кабинет</a>
        <button type="button" class="btn btn-sm btn-primary" @onclick="Add">Сохранить</button>
    </Footer>
</Modal>

@code
{

    #region Поля, Инициализация формы, Модальное окно
    [Parameter]
    public IRepository<Invoice> repository { get; set; }

    [Parameter]
    public List<Provider> Providers { get; set; }

    [Parameter]
    public List<Period> Periods { get; set; }

    [Parameter]
    public List<Service> Services { get; set; }

    [Parameter]
    public EventCallback<Invoice> OnClickSetService { get; set; }

    

    private IEnumerable<Invoice> invoices;
    private Invoice invoice;
    private decimal summ;
    private bool pay;
    private bool isNotPaided;
    private bool isPay;

    //Providers
    private Provider provider;
    private List<Provider> providersList;
    private string providerName;

    //Periods
    private Period period;
    private List<Period> periodsList;
    private string periodName;

    //Services
    private List<Service> servicesList;


    //Модальное окно
    private Modal modal { get; set; }

    private void CloseModal()
    {
        summ = default;
        invoice = default;
        pay = default;
        modal.ModalSize = "";

        modal.Close();
    }

    private void OpenModal()
    {
        modal.Open();
    }

    protected override void OnInitialized()
    {
        providersList = Providers;
        periodsList = Periods.OrderByDescending(p=>p.ToSort()).ToList();
        servicesList = Services;
        ShowPaided();
        providerName = providersList[0].NameProvider;
        periodName = periodsList[0].ToString();
        pay = default;
        isNotPaided = true;
        invoice = default;
        isPay = default;
    }

    private Provider GetProviderByName(string name) => providersList.SingleOrDefault(n => n.NameProvider == name);

    private Period GetPeriodByName(string name) => periodsList.SingleOrDefault(n => n.ToString() == name);
 
    #endregion

    #region Обработка нажатия кнопок

    /// <summary>
    /// Добавить или отредактировать
    /// </summary>
    private void Add()
    {
        if (!string.IsNullOrWhiteSpace(periodName) && !string.IsNullOrWhiteSpace(providerName))
        {
            provider = GetProviderByName(providerName);
            period = GetPeriodByName(periodName);
            //Добавить новый
            if (invoice == null)
            {

                invoice = new Invoice()
                {
                    Period = period,
                    Provider = provider,
                    InvoiceSum = summ,
                    Pay = false
                };
                repository.Add(invoice);

            }
            //Отредактировать
            else
            {
                invoice.Period = period;
                invoice.Provider = provider;
                invoice.InvoiceSum = summ;
                invoice.Pay = pay;
                repository.Edit(invoice);
            }

        }

        CloseModal();
    }

    /// <summary>
    /// Изменить запись
    /// </summary>
    private void Edit(Invoice item)
    {
        invoice = item;
        modal.Open();

        periodName = item.Period.ToString();
        providerName = item.Provider.NameProvider;
        summ = item.InvoiceSum;
        pay = item.Pay;

    }

    /// <summary>
    /// Удалить запись
    /// </summary>
    /// <param name="item"></param>
    private void Remove(Invoice item)
    {
        repository.Remove(item);
    }

    private void SetService(Invoice item)
    {
        OnClickSetService.InvokeAsync(item);
    }

    private void Pay(Invoice item)
    {
        invoice = item;
        isPay = true;
    }

    private void ShowPaided()
    {
        isNotPaided = !isNotPaided;
        if (isNotPaided)
        {
            invoices = repository.GetAll().Where(i => i.Pay == false).OrderByDescending(p=>p.Period.ToSort());
        }
        else
        {
            invoices = repository.GetAll().OrderByDescending(p=>p.Period.ToSort());
        }
    }

    private void RePaid()
    {
        pay = !pay;
    }

    private void ReturnToPayment()
    {
        isPay = false;
    }

    #endregion


}
