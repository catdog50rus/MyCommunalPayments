@page "/Invoices/invoices"
@inject MyCommunalPayments.Data.Services.Repositories.Base.IRepository<Invoice> repository
@inject MyCommunalPayments.Data.Services.Repositories.Base.IRepository<Provider> providerRepository
@inject MyCommunalPayments.Data.Services.Repositories.Base.IRepository<Period> periodRepository
@inject MyCommunalPayments.Data.Services.Repositories.Base.IRepository<InvoiceServices> invoiceServicesRepository
@inject MyCommunalPayments.Data.Services.Repositories.Base.IRepository<Service> servicesRepository
@inject MyCommunalPayments.Data.Services.Repositories.Base.IRepository<ProvidersServices> providersServicesRepository
@inject NavigationManager navi

<!-- Форма -->
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h2 class="text-center">Квитанции ЖКХ </h2>
            @*Флаг отображения оплаченных/неоплаченных квитанций*@
            <div class="text-left align-content-center">
                <label>Показывать только неоплаченные квитанции</label>
                <input type="checkbox" checked="checked" value="isNotPaided" @onchange="()=>ShowPaided()" />
            </div>
            @*Добавление нового счета*@
            <div class="row mb-3">
                <div class="col">
                    <button class="btn btn-success" @onclick="()=>modal.Open()">Добавить</button>
                </div>
            </div>
            @*  Отображение таблицы со счетами  *@ 
            <table class="table table-sm table-bordered table-hover ">
                @*Заголовок таблицы*@
                <thead class="table-dark ">
                    <tr>
                        <th scope="col">Оплачено</th>
                        <th scope="col" class="w-auto">Период</th>
                        <th scope="col" class="w-auto">Поставщик услуг</th>
                        <th scope="col" class="w-auto">Сумма</th>
                        <th scope="col" class="w-auto"></th>
                        <th scope="col" class="w-auto"></th>
                    </tr>
                </thead>
                @*Тело таблицы*@
                @foreach (var item in invoices)
                {
                    <tbody>
                        <tr>
                            <!--Чек-бокс-->
                            <td>
                                <div class="text-center align-content-center">
                                    @if (item.Pay)//Проверяем, был ли флажек в БД
                                    {
                                        //Если был ставим атрибут checked
                                        <input onclick="return false;" type="checkbox" checked="checked" />
                                    }
                                    else
                                    {
                                        <input onclick="return false;" type="checkbox" />
                                    }
                                </div>
                            </td>
                            <!--Период-->
                            <td>
                                <div>
                                    @item.Period
                                </div>
                            </td>
                            <!--Поставщик-->
                            <td>
                                <div>
                                    @item.Provider.NameProvider
                                </div>
                            </td>
                            <!--Сумма-->
                            <td>
                                <div class="text-right">
                                    @item.InvoiceSum
                                </div>

                            </td>
                            <!--Блок кнопок-->
                            <td>
                                <div class="text-center">
                                    <button class="btn btn-sm btn-info" @onclick="(() => Edit(item))">Изменить</button>
                                    <button class="btn btn-sm btn-danger" @onclick="(() => Remove(item))">Удалить</button>
                                    <button class="btn btn-sm btn-warning" @onclick="(()=>SetService(item))">Услуги</button>
                                </div>
                            </td>
                            @*Блок оплаты*@
                            <td>
                                <div class="text-center">
                                    @if (item.Pay)
                                    {
                                        <span class="text-center" style="color:green">Оплачено!</span>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-outline-success" @onclick="()=>Pay(item)">Оплатить</button>
                                    }

                                    
                                </div>
                            </td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
    </div>
</div>

<!-- Modal -->
<Modal @ref="modal">
    <Title>
        <p>Добавление нового счета за ЖКХ</p>
    </Title>
    <CloseButton>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
            <span aria-hidden="true">&times;</span>
        </button>
    </CloseButton>
    <Body>
        <!--Период-->
        <div class="col mb-3">
            <select class="form-control" placeholder="Период" @bind="periodName">
                @foreach (var item in periodsList)
                {
                    <option>@item.ToString()</option>
                }
            </select>
        </div>
        <!--Поставщик-->
        <div class="col mb-3">
            <select class="form-control" placeholder="Поставщик" @bind="providerName">
                @foreach (var item in providersList)
                {
                    <option>@item.NameProvider</option>
                }
            </select>
        </div>
        <!--Сумма-->
        <div class="col mb-3">
            <input class="form-control" placeholder="Сумма" @bind="summ" />
        </div>
        @*Флаг оплаты. Можно только снять оплату*@
        @if (pay)
        {
            <div>
                <input @onchange="()=>RePaid()" type="checkbox" checked="checked" value="@pay" />
            </div>
        }
    </Body>
    <Footer>
        <a class="btn btn-sm btn-outline-success" role="button" href="@GetProviderByName(providerName).WebSite" target="_blank">Перейти в личный кабинет</a>
        <button type="button" class="btn btn-sm btn-primary" @onclick="Add">Сохранить</button>
    </Footer>
</Modal>

@code
{

    #region Поля, Инициализация формы, Модальное окно
    private Invoice invoice;
    private IEnumerable<Invoice> invoices;
    private decimal summ;
    private bool pay;
    private bool isNotPaided;

    //Providers
    private Provider provider;
    private List<Provider> providersList;
    private string providerName;
    //private List<ProvidersServices> providersServicesList;

    //Periods
    private Period period;
    private List<Period> periodsList;
    private string periodName;

    //Services
    //private bool isService;
    //private Service service;
    private List<Service> servicesList;
    //private string serviceName;
    //private int amount;

    //private InvoiceServices invoiceServices;
    private IEnumerable<InvoiceServices> invoiceServicesCollection;


    //Модальное окно
    private Modal modal { get; set; }
    //private ServicesCounters servicesCounters { get; set; }

    private void CloseModal()
    {
        //providerName = default;
        //periodName = default;
        summ = default;
        invoice = default;
        //isService = false;
        //invoiceServices = default;
        pay = default;
        //providersServicesList = default;
        modal.ModalSize = "";

        modal.Close();
    }

    private void OpenModal()
    {
        modal.Open();
    }

    protected override void OnInitialized()
    {
        providersList = providerRepository.GetAll().ToList();
        periodsList = periodRepository.GetAll().ToList();
        servicesList = servicesRepository.GetAll().ToList();
        //invoices = repository.GetAll().Where(i => i.Pay == false).OrderByDescending(p => p.Period.ToSort());
        ShowPaided(); //1
        providerName = providersList[0].NameProvider;
        periodName = periodsList[0].ToString();
        //serviceName = servicesList[0].NameService;
        pay = default;
        isNotPaided = true;


        invoice = default;
    }

    private Provider GetProviderByName(string name)
    {
        return providersList.SingleOrDefault(n => n.NameProvider == name);
    }

    private Period GetPeriodByName(string name)
    {
        return periodsList.SingleOrDefault(n => n.ToString() == name);
    }

    //private Service GetServiceByName(string name)
    //{
    //    return servicesList.Single(s => s.NameService == name);
    //}

    #endregion

    #region Обработка нажатия кнопок

    /// <summary>
    /// Добавить или отредактировать
    /// </summary>
    private void Add()
    {
        if (!string.IsNullOrWhiteSpace(periodName) && !string.IsNullOrWhiteSpace(providerName))
        {
            provider = GetProviderByName(providerName);
            period = GetPeriodByName(periodName);
            //Добавить новый
            if (invoice == null)
            {

                invoice = new Invoice()
                {
                    Period = period,
                    Provider = provider,
                    InvoiceSum = summ,
                    Pay = false
                };
                repository.Add(invoice);

            }
            //Отредактировать
            else
            {
                invoice.Period = period;
                invoice.Provider = provider;
                invoice.InvoiceSum = summ;
                invoice.Pay = pay;
                repository.Edit(invoice);
            }

        }

        CloseModal();
    }

    /// <summary>
    /// Изменить запись
    /// </summary>
    private void Edit(Invoice item)
    {
        invoice = item;
        modal.Open();

        periodName = item.Period.ToString();
        providerName = item.Provider.NameProvider;
        summ = item.InvoiceSum;
        pay = item.Pay;

    }

    /// <summary>
    /// Удалить запись
    /// </summary>
    /// <param name="item"></param>
    private void Remove(Invoice item)
    {
        repository.Remove(item);
    }

    private void SetService(Invoice item)
    {
        invoice = item;
        invoiceServicesCollection = invoiceServicesRepository.GetAll().Where(i => i.Invoice.IdInvoice == invoice.IdInvoice);
        //providersServicesList = providersServicesRepository.GetAll().Where(p => p.IdProvider == item.IdProvider).ToList();
        //isService = true;
        navi.NavigateTo($"/Services/InvoiceServices/{item.IdInvoice}");
        //navi.NavigateTo($"/Services/ServicesCounters/{item.IdInvoice}");
        //modal.ModalSize = "modal-lg";
        //OpenModal();
    }

    //private void AddService()
    //{
    //    service = GetServiceByName(serviceName);
    //    invoiceServices = new InvoiceServices()
    //    {
    //        Invoice = invoice,
    //        Service = service,
    //        Amount = amount
    //    };
    //    invoiceServicesRepository.Add(invoiceServices);

    //}

    //private void RemoveService(InvoiceServices item)
    //{
    //    invoiceServicesRepository.Remove(item);
    //}

    private void Pay(Invoice item)
    {
        invoice = item;
        navi.NavigateTo($"/Invoices/Payments/{item.IdInvoice}");
        //invoice.Pay = true;
        //repository.Edit(invoice);
    }

    private void ShowPaided()
    {
        isNotPaided = !isNotPaided;
        if (isNotPaided)
        {
            invoices = repository.GetAll().Where(i => i.Pay == false).OrderByDescending(p=>p.Period.ToSort());
        }
        else
        {
            invoices = repository.GetAll().OrderByDescending(p=>p.Period.ToSort());
        }
    }

    private void RePaid()
    {
        pay = !pay;

    }

    #endregion


}
