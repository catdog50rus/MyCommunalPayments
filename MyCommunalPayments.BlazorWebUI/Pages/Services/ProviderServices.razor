@page "/Services/ProvidersServices"
@using MyCommunalPayments.BlazorWebUI.Pages
@inject MyCommunalPayments.Data.Services.Repositories.Base.IRepository<ProvidersServices> repository
@inject MyCommunalPayments.Data.Services.Repositories.Base.IRepository<Provider> repositoryProviders
@inject MyCommunalPayments.Data.Services.Repositories.Base.IRepository<Service> repositoryServices
<!-- Форма -->
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h2 class="text-center">Услуги ЖКХ по Поставщикам </h2>
            <!--Добавление услуг поставщику-->
            <div class="row mb-3">
                <div class="col">
                    <button class="btn btn-success" @onclick="()=>OpenModal()">Добавить</button>
                </div>
            </div>
            <!--  Таблица с периодами  -->
            <table class="table table-sm table-bordered table-hover ">
                <!--Заголовок таблицы-->
                <thead class="table-dark text-center">
                    <tr>
                        <th scope="col" class="w-auto">Поставщик</th>
                        <th scope="col" class="w-auto">Услуга</th>
                        <th scope="col" class="w-auto text-center"></th>
                    </tr>
                </thead>
                <!--Тело таблицы-->
                @foreach (var item in ProvidersServicesCollection)
                {
                    <tbody>
                        <tr>
                            <!--Поставщик-->
                            <td>
                                <div>
                                    @item.Provider.NameProvider
                                </div>

                            </td>
                            <!--Услуга-->
                            <td>
                                <div>
                                    @item.Service.NameService
                                </div>

                            </td>
                            <!--Блок кнопок-->
                            <td>
                                <div class="text-center">
                                    <button class="btn btn-sm btn-info" @onclick="(() => Edit(item))">Изменить</button>
                                    <button class="btn btn-sm btn-danger" @onclick="(() => Remove(item))">Удалить</button>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
    </div>
</div>

<!-- Modal -->
<Modal @ref="modal">
    <Title>Добавление нового поставщика услуг ЖКХ</Title>
    <CloseButton>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
            <span aria-hidden="true">&times;</span>
        </button>
    </CloseButton>
    <Body>
        <div>
            <table class="table table-sm table-bordered table-hover">
                <thead class="table-light">
                    <tr>
                        <th class="w-50"></th>
                        <th class="w-25"></th>
                        <th class="w-25"></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <!--Поставщик-->
                            <div>
                                <select class="form-control" placeholder="Поставщик" @bind="providerName">
                                    @foreach (var item in providers)
                                    {
                                        <option>@item.NameProvider</option>
                                    }
                                </select>
                            </div>
                        </td>
                        <td>
                            <!--Услуга-->
                            <div>
                                <select class="form-control" placeholder="Услуга" @bind="serviceName">
                                    @foreach (var item in services)
                                    {
                                        <option>@item.NameService</option>
                                    }
                                </select>
                            </div>
                        </td>
                        <td>
                            <div class="text-center">
                                <button type="button" class="btn btn-sm btn-primary" @onclick="Add">Добавить</button>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </Body>
    <Footer>
        @*<button type="button" class="btn btn-sm btn-primary" @onclick="Add">Сохранить</button>*@
    </Footer>
</Modal>


@code
{
    #region Поля, Инициализация формы, Модальное окно

    private ProvidersServices providersServices = default;
    private IEnumerable<ProvidersServices> ProvidersServicesCollection;
    private string providerName;
    private string serviceName;

    private List<Provider> providers;
    private List<Service> services;

    //Модальное окно
    private Modal modal { get; set; }

    private void CloseModal()
    {
        providerName = default;
        serviceName = default;
        providersServices = default;
        modal.Close();
    }
    private void OpenModal()
    {
        modal.ModalSize = "modal-lg";
        modal.Open();
    }

    protected override void OnInitialized()
    {
        ProvidersServicesCollection = repository.GetAll();

        providers = repositoryProviders.GetAll().ToList();
        services = repositoryServices.GetAll().ToList();

        providerName = providers[0].NameProvider;
        serviceName = services[0].NameService;
    }

    Provider GetProviderByName(string name)
    {
        return providers.Single(i => i.NameProvider == name);
    }

    Service GetServiceByName(string name)
    {
        return services.Single(i => i.NameService == name);
    }


    #endregion

    #region Обработка нажатия кнопок

    /// <summary>
    /// Добавить или отредактировать
    /// </summary>
    private void Add()
    {
        if (!string.IsNullOrWhiteSpace(providerName) && !string.IsNullOrWhiteSpace(serviceName))
        {

            if (providersServices == null)
            {
                providersServices = new ProvidersServices()
                {
                    Provider = GetProviderByName(providerName),
                    Service = GetServiceByName(serviceName)
                };

                repository.Add(providersServices);
            }
            else
            {
                providersServices.Provider = GetProviderByName(providerName);
                providersServices.Service = GetServiceByName(serviceName);
                repository.Edit(providersServices);
            }
        }

        CloseModal();
    }

    /// <summary>
    /// Изменить запись
    /// </summary>
    private void Edit(ProvidersServices item)
    {
        providersServices = item;
        modal.Open();
        providerName = item.Provider.NameProvider;
        serviceName = item.Service.NameService;
    }

    /// <summary>
    /// Удалить запись
    /// </summary>
    /// <param name="item"></param>
    private void Remove(ProvidersServices item)
    {
        repository.Remove(item);
    }


    #endregion

}