@page "/"
@inject IRepository<Invoice> repositoryInvoice
@inject IRepository<InvoiceServices> repositoryInvoiceServices
@inject IRepository<Payment> repositoryPayment
@inject IRepository<Period> repositoryPeriod
@inject IRepository<Provider> repositoryProvider
@inject IRepository<ProvidersServices> repositoryProvidersServices
@inject IRepository<Service> repositoryService
@inject IRepository<ServiceCounter> repositoryServiceCounter


@if (!_isServices)
{
<MyCommunalPayments.BlazorWebUI.Pages.Invoices.Invoices repository="repositoryInvoice"
                                                        Providers="_providers.ToList()"
                                                        Periods="_periods.ToList()"
                                                        Services="_services.ToList()"
                                                        OnClickSetService="OpenInvoceServices" />
}
else
{
    <InvoicesServices
                      Invoice="_invoice"
                      repository="repositoryInvoiceServices"
                      countersRepository="repositoryServiceCounter"
                      ProviderServices="_providerServices.ToList()"
                      OnClickReturnToInvoces="CloseInvoiceServices"
                      />


}





@code{

    private IEnumerable<Invoice> _invoices;
    private IEnumerable<InvoiceServices> _invoiceServices;
    private IEnumerable<Payment> _payments;
    private IEnumerable<Period> _periods;
    private IEnumerable<Provider> _providers;
    private IEnumerable<ProvidersServices> _providerServices;
    private IEnumerable<Service> _services;
    private IEnumerable<ServiceCounter> _serviceCounters;



    private bool _isServices;
    private Invoice _invoice;

    protected override void OnInitialized()
    {
        _invoices = repositoryInvoice.GetAll();
        _invoiceServices = repositoryInvoiceServices.GetAll();
        _payments = repositoryPayment.GetAll();
        _periods = repositoryPeriod.GetAll();
        _providers = repositoryProvider.GetAll();
        _providerServices = repositoryProvidersServices.GetAll();
        _services = repositoryService.GetAll();
        _serviceCounters = repositoryServiceCounter.GetAll();
        _isServices = default;
    }

    private void OpenInvoceServices(Invoice invoice)
    {
        _isServices = true;
        //_idInvoice = id;
        _invoice = invoice;

    }

    private void CloseInvoiceServices()
    {
        _isServices = false;
    }


}